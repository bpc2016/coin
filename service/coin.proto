// This is the .proto file that lays out the various interfaces

syntax = "proto3";


package cpb;  // coin proto buffer

// The mining service definition.
service Coin {
  // very first message client -> server requests login details
  rpc Login (LoginRequest) returns (LoginReply) {}
  
  // GetWork is a request to start mining
  rpc GetWork (GetWorkRequest) returns (GetWorkReply) {}
  
  // Announce is a request to accept a win discovery
  rpc Announce (AnnounceRequest) returns (AnnounceReply) {}
  
  // GetCancel is a request for a cancellation of search
  rpc GetCancel (GetCancelRequest) returns (GetCancelReply) {}
  
  // IssueBlock is an offer of search block data
  rpc IssueBlock (IssueBlockRequest) returns (IssueBlockReply) {}

  // GetResult is a  request for a solution
  rpc GetResult (GetResultRequest) returns (GetResultReply) {}
}

// The Login request message containing the user's name.
message LoginRequest {
  string name = 1;  // really the login
  string time = 2;  // unix time as hex string
  uint32 user = 3;  // owner of miner machine - uuid
}

// GetWork request carries the same name as login
message GetWorkRequest {
  string name = 1;
}

// Announce request is a Win struct - coinbase + nonce
message AnnounceRequest {
  Win win = 1;
}

// GetCancel requests carries the same name as login
message GetCancelRequest {
  string name = 1;
}

// IssueBlock requests carries the string block
message IssueBlockRequest {
  bytes upper = 1;        // coinbase upper
  bytes lower = 2;        // coinbase lower
  uint32 blockheight =3;  // the current block height
  bytes block = 4;        // blockheader
  bytes merkle = 5;       // merkle root skeleton
  uint32 bits = 6;        // for target computation
  string server = 7;      // this is how conductor issues server name
}

// GetResult requests carries the same name as login
message GetResultRequest {
  string name = 1;
}

// Login response message containing the assigned id and work
message LoginReply {
  uint32 id = 1;
}

// GetWork response is a work struct
message GetWorkReply {
  Work work = 1;
}

// Announce response is boolean
message AnnounceReply {
  bool ok = 1;
}

// GetCancel response is the canonical name of server // index of server
message GetCancelReply {
  string server = 1; // uint32 index = 1;
}

// IssueBlock response is boolean
message IssueBlockReply {
  bool ok = 1;
}

// GetResult response is the winner details + server name // index
message GetResultReply {
  Win winner = 1;
  string server = 2;  // uint32 index = 2;
}

message Work {
  bytes coinbase = 1; // coinbase byte seq
  bytes block = 2;    // partial block header
  bytes skel = 3;     // merkle root skeleton 
  uint32 bits = 4;    // to convert to target
  uint32 share = 5;   // lower bar for share
}

message Win {
  bytes block = 1;    // will include the winning nonce and winner 
  uint32 nonce = 2;   // this is for the toy version 
  string identity = 3; // ditto
}